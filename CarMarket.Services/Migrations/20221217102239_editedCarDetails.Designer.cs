// <auto-generated />
using System;
using CarMarket.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarMarket.Services.Migrations
{
    [DbContext(typeof(CarMarketDbContext))]
    [Migration("20221217102239_editedCarDetails")]
    partial class editedCarDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarMarket.Services.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d0000ce-d726-4fc8-00d9-d6b3ac1f001e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffaebd6a-3538-4b82-8aaf-bfadfbf2af73",
                            Email = "zdravko@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Zdravko",
                            LastName = "Koldzhiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "zdravko@mail.com",
                            NormalizedUserName = "zdravko",
                            PasswordHash = "AQAAAAEAACcQAAAAEEUjCmrOnT444rHvh9rvRHfmfqPZxI0CD9VjsdWAIoClJE1hscbAWdD2ik9PNmOdWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39fe7308-5805-446e-8b9a-cd009a17f03b",
                            TwoFactorEnabled = false,
                            UserName = "zdravko"
                        });
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("nvarchar(23)");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("EngineTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EuroStandardId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("YearProduced")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealerId");

                    b.HasIndex("EngineTypeId");

                    b.HasIndex("EuroStandardId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Color = "Grey",
                            DealerId = 2,
                            EngineTypeId = 2,
                            EuroStandardId = 5,
                            HorsePower = 288,
                            ImageURL = "https://www.topgear.com/sites/default/files/2021/08/A1911776_large.jpg",
                            Make = "Audi",
                            Mileage = 224,
                            Model = "A5",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 21600,
                            YearProduced = 2021
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Color = "Red",
                            DealerId = 2,
                            EngineTypeId = 2,
                            EuroStandardId = 5,
                            HorsePower = 145,
                            ImageURL = "https://i.ytimg.com/vi/H9v116cyZtA/maxresdefault.jpg",
                            Make = "VW",
                            Mileage = 11567,
                            Model = "Golf 7",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 24300,
                            YearProduced = 2018
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            Color = "White",
                            DealerId = 2,
                            EngineTypeId = 2,
                            EuroStandardId = 5,
                            HorsePower = 255,
                            ImageURL = "https://www.autoclub.bg/wp-content/uploads/2022/07/2023-toyota-supra-with-manual-gearbox-europe.jpg",
                            Make = "Toyota",
                            Mileage = 41234,
                            Model = "Supra",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 44600,
                            YearProduced = 2016
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Color = "Gold",
                            DealerId = 2,
                            EngineTypeId = 1,
                            EuroStandardId = 5,
                            HorsePower = 189,
                            ImageURL = "https://paultan.org/image/2022/03/2022-Mazda-3-3-e1648438220538.png",
                            Make = "Mazda",
                            Mileage = 22478,
                            Model = "3",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 25700,
                            YearProduced = 2019
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Color = "Grey",
                            DealerId = 2,
                            EngineTypeId = 2,
                            EuroStandardId = 5,
                            HorsePower = 346,
                            ImageURL = "https://www.topgear.com/sites/default/files/2022/09/2024%20Mustang%2006.jpg",
                            Make = "Ford",
                            Mileage = 8743,
                            Model = "Mustang",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 31000,
                            YearProduced = 2020
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Color = "Blue",
                            DealerId = 2,
                            EngineTypeId = 4,
                            EuroStandardId = 6,
                            HorsePower = 256,
                            ImageURL = "https://media.autoexpress.co.uk/image/private/s--X-WVjvBW--/f_auto,t_content-image-full-desktop@1/v1615375317/autoexpress/2021/03/Hyundai%20Tucson%202021%20front%20driving.jpg",
                            Make = "Huyndai",
                            Mileage = 11,
                            Model = "Tucson",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 40000,
                            YearProduced = 2022
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Color = "Red",
                            DealerId = 2,
                            EngineTypeId = 1,
                            EuroStandardId = 6,
                            HorsePower = 178,
                            ImageURL = "https://cdn.motor1.com/images/mgl/kXQZM/s1/mercedes-benz-e-klasse-cabriolet-2020.jpg",
                            Make = "Mercedes",
                            Mileage = 1391,
                            Model = "E Class",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 21200,
                            YearProduced = 2021
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Color = "Red",
                            DealerId = 2,
                            EngineTypeId = 1,
                            EuroStandardId = 6,
                            HorsePower = 355,
                            ImageURL = "https://www.motortrend.com/uploads/2022/10/2023-BMW-M5-exterior-8.jpg",
                            Make = "BMW",
                            Mileage = 49,
                            Model = "M5",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 34000,
                            YearProduced = 2022
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Color = "White",
                            DealerId = 2,
                            EngineTypeId = 2,
                            EuroStandardId = 6,
                            HorsePower = 878,
                            ImageURL = "https://www.mercedes-benz.co.th/en/passengercars/mercedes-benz-cars/models/gle/suv-v167/amg/line-comparison/_jcr_content/comparisonslider/par/comparisonslide/exteriorImage.MQ6.12.20210819205221.jpeg",
                            Make = "Mercedes",
                            Mileage = 709,
                            Model = "GLE",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 78200,
                            YearProduced = 2022
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Color = "Black",
                            DealerId = 2,
                            EngineTypeId = 1,
                            EuroStandardId = 6,
                            HorsePower = 900,
                            ImageURL = "https://cdn.motor1.com/images/mgl/nGzgl/s1/2021-bugatti-chiron-front.jpg",
                            Make = "Bugatti",
                            Mileage = 17,
                            Model = "Chiron",
                            OwnerId = "3c5e88ea-215a-4da6-9273-03a27d2e6c79",
                            Price = 4100000,
                            YearProduced = 2022
                        });
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cabriolet"
                        });
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Dealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "+359000888999",
                            UserId = "6d0000ce-d726-4fc8-00d9-d6b3ac1f001e"
                        });
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.EngineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("EngineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Petrol"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid"
                        });
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.EuroStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("EuroStandards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EURO 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EURO 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EURO 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "EURO 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "EURO 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "EURO 6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Car", b =>
                {
                    b.HasOne("CarMarket.Services.Data.Entities.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMarket.Services.Data.Entities.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMarket.Services.Data.Entities.EngineType", "EngineType")
                        .WithMany("Cars")
                        .HasForeignKey("EngineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMarket.Services.Data.Entities.EuroStandard", "EuroStandard")
                        .WithMany("Cars")
                        .HasForeignKey("EuroStandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Category");

                    b.Navigation("Dealer");

                    b.Navigation("EngineType");

                    b.Navigation("EuroStandard");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Dealer", b =>
                {
                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarMarket.Services.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.EngineType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarMarket.Services.Data.Entities.EuroStandard", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
